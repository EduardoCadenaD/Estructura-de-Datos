//// PACKAGE Control
/// CLASS Ejecutar

/*
 ESTRUCTURA DE DATOS
 Ejercicio: Listas 3
 * Nombre: Viviana Marcela Peña Márquez. 
 * Fecha: Jueves, 16 de a abril de 2015.
 * Institución: Konrad Lorenz Fundación Universitaria.
 * Profesora: Mireya Gómez Bernal.

 Enunciado:
Se desea representar las matrices  mediante listas de listas de n números, de manera que 
la lista i-´esima de n numeros corresponda a la fila i-´esima de la matriz. Por ejemplo, la 
matriz de 3x3:
1 2 3
4 5 6
7 8 9
se representaría mediante la lista de listas:
[ [1,2,3], [4,5,6], [7,8,9] ]
 */
package Control;

import Modelo.ListaEnlazadas;
import Vista.InOut;
import java.util.Vector;

/**
 *
 * @author vivmarquez
 *
 */
public class Ejecutar {

    public static void main(String[] args) {

        InOut ob = new InOut();
        
        int filas = ob.solicitarEnteroPositivo("¿Cuántas filas tiene su matriz?");
        int columnas = ob.solicitarEnteroPositivo("¿Cuántas columnas tiene su matriz?");
        
        ob.mostrarInfo("A continuación ingresaremos la matriz.");
        
        ListaEnlazadas fin = new ListaEnlazadas();
        
        for (int i = 0; i < filas; i++) {
            ListaEnlazadas nueva = new ListaEnlazadas();
            
            for (int j = 0; j < columnas; j++) {
                int n = ob.solicitarEntero("Ingrese el dato ["+i+"]["+j+"] de la matriz:");
                nueva.add(n);
                
            }
            
           fin.add(nueva);
       
        }
        
        ob.mostrarInfo("La matriz es: \n"+fin);
    }

}

//// PAQUETE Modelo
/// CLASE ListaEnlazadas

package Modelo;

import java.util.Vector;

public class ListaEnlazadas {

    private Node cabeza;

    public ListaEnlazadas() {
        this.cabeza = null;
    }

    //Método para agregar un nodo al final.
    public void add(int valor) {

        //Creación del objeto Nodo
        Node nodo = new Node(valor);

        //Si la cabeza está vacia, entonces el nodo ingresado becomes la cabeza.
        if (this.cabeza == null) {
            this.cabeza = nodo;
        } else {
            //El nodo auxiliar inicialmente queda valiendo la cabeza.
            Node auxiliar = this.cabeza;
            //Mientras que el siguiente no sea vácio.
            while (auxiliar.getSiguiente() != null) {
                //El auxiliar pasa a tener el valor del siguiente.
                auxiliar = auxiliar.getSiguiente();
            }
            //Cuando se acaba el ciclo, el siguiente, es decir el último, queda valiendo lo del nodo.
            auxiliar.setSiguiente(nodo);
        }

    }
    
    public void add(ListaEnlazadas l) {

        //Creación del objeto Nodo
        Node nodo = new Node(l);

        //Si la cabeza está vacia, entonces el nodo ingresado becomes la cabeza.
        if (this.cabeza == null) {
            this.cabeza = nodo;
        } else {
            //El nodo auxiliar inicialmente queda valiendo la cabeza.
            Node auxiliar = this.cabeza;
            //Mientras que el siguiente no sea vácio.
            while (auxiliar.getSiguiente() != null) {
                //El auxiliar pasa a tener el valor del siguiente.
                auxiliar = auxiliar.getSiguiente();
            }
            //Cuando se acaba el ciclo, el siguiente, es decir el último, queda valiendo lo del nodo.
            auxiliar.setSiguiente(nodo);
        }

    }

    public Node getCabeza() {
        return cabeza;
    }
    
    

    //Método toString
    public String toString() {

        String s = "";
        //s=s+"Lista: ";

        Node p = this.cabeza;
        while (p != null) {
            s = s + "[" + p.toString() + "]";
            p = p.getSiguiente();
        }

        return s;
    }

    public Vector<Integer> buscarNumero(int b) {
        
        Vector<Integer> vec = new Vector<Integer>();

        Node n = this.cabeza;
      
        int aux=0;

        while (n != null) {
            aux++;
            if(n.getValor()==b){
            vec.add(aux);
            }
            n = n.getSiguiente();
        }
        return vec;
    }

}

/// CLASE Node

package Modelo;

public class Node {

    private int valor;
    private Node siguiente;
    private ListaEnlazadas l;
    int band = 0;

    //Métodos constructores
    public Node(int valor) {
        this.valor = valor;
        this.siguiente = null;
    }

    public Node(ListaEnlazadas l) {
        this.l = l;
        this.siguiente = null;
        band++;
    }

    public Node(int cargo, Node siguiente) {
        this.valor = cargo;
        this.siguiente = siguiente;
    }

    public Node(ListaEnlazadas l, Node siguiente) {
        this.l = l;
        this.siguiente = siguiente;
    }

    //Métodos Set
    public void setValor(int valor) {
        this.valor = valor;
    }

    public void setSiguiente(Node siguiente) {
        this.siguiente = siguiente;
    }

    public void setL(ListaEnlazadas l) {
        this.l = l;
    }

    //Métodos get
    public int getValor() {
        return valor;
    }

    public Node getSiguiente() {
        return siguiente;
    }

    public ListaEnlazadas getL() {
        return l;
    }

    //Método toString
    public String toString() {

        if (band == 0) {
            return valor + "";
        } else {
            return "{ "+l + " }";
        }

    }

}

//// PAQUETE Vista
/// CLASE InOut

package Vista;

import javax.swing.JOptionPane;

public class InOut {

    //Este método se encarga de solicitar string.
    public String solicitarInfo(String mensaje) {
        String s = JOptionPane.showInputDialog(mensaje);
        return s;
    }

    //Este método se encarga de solicitar entero.
    public int solicitarEntero(String mensaje) {
        String s = JOptionPane.showInputDialog(mensaje);

        while (validarStringEntero(s) == false) {
            s = JOptionPane.showInputDialog("DATO NO VÁLIDO\n" + mensaje);
        }

        int n = Integer.parseInt(s);

        return n;
    }
    
    //Este método se encarga de solicitar entero.
    public int solicitarEnteroPositivo(String mensaje) {
        String s = JOptionPane.showInputDialog(mensaje);

        while (validarStringEnteroPositivo(s) == false) {
            s = JOptionPane.showInputDialog("DATO NO VÁLIDO\n" + mensaje);
        }

        int n = Integer.parseInt(s);

        return n;
    }

    //Este método se encarga de solicitar boolean.
    public boolean solicitarBoolean(String mensaje) {
        if (JOptionPane.showConfirmDialog(null, mensaje, mensaje,
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {

            return true;
        } else {
            return false;
        }
    }

    //Este método muestra en pantalla el resultado.
    public void mostrarInfo(String mensaje) {
        JOptionPane.showMessageDialog(null, mensaje);
        //Null=Ubicación de Mensaje.
    }

    public boolean validarStringEntero(String n) {
        if ((n).matches("[-]?[0-9]+")) {
            return true;
        } else {
            return false;
        }
    }
    
    public boolean validarStringEnteroPositivo(String n) {
        if ((n).matches("[0-9]+")) {
            if(Integer.parseInt(n)>0){
            return true;
        }else {
                return false;
                }
        } else {
            return false;
        }
    }

}

