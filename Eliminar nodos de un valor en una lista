//// PAQUETE Control

/// CLASE Ejecutar

/*
 ESTRUCTURA DE DATOS
 Ejercicio: Listas 1
 * Nombre: Viviana Marcela Peña Márquez. 
 * Fecha: Jueves, 16 de a abril de 2015.
 * Institución: Konrad Lorenz Fundación Universitaria.
 * Profesora: Mireya Gómez Bernal.

 Enunciado:
 Realice un programa que recibe una lista de enteros y un número entero n de forma que
 modifique la lista mediante el borrado de todos los elementos de la lista que tengan este
 valor.
 */
 
package Control;

import Modelo.ListaEnlazadas;
import Vista.InOut;

/**
 *
 * @author vivmarquez
 *
 */
public class Ejecutar {

    public static void main(String[] args) {

        InOut ob = new InOut();
        ListaEnlazadas lista = new ListaEnlazadas();
        
        ob.mostrarInfo("¡Bienvenidx!\nA continuación vamos a ingresar datos.");
        
        int n = ob.solicitarEntero("Ingrese un entero: ");
        lista.add(n);
        
     
        while(true){
            boolean aux = ob.solicitarBoolean("¿Desea ingresar un nuevo dato?");
            if(aux==false){
                break;
            }
            n = ob.solicitarEntero("Ingrese un entero: ");
            lista.add(n);
        }

        System.out.println("La lista original es: ");
        System.out.println(lista);
        
        String res = "";
        res=res+"La lista original es: \n";
        res=res+lista+"\n";
        
        //Solicitar un dato a borrar.
        int b = ob.solicitarEntero("Ingrese un entero que desea borrar de la lista.");
        lista.removerNumero(b);
        
        System.out.println("");
        System.out.println("La lista sin el número "+b+" es: ");
        System.out.println(lista);
        System.out.println("");
        
        
        res=res+"\n";
        res=res+"La lista sin el número "+b+" es: \n";
        res=res+lista+"\n\n";
        
        ob.mostrarInfo(res);
        
    }

}

//// PAQUETE Modelo

/// CLASE ListaEnlazadas

package Modelo;

public class ListaEnlazadas {

    private Node cabeza;

    public ListaEnlazadas() {
        this.cabeza = null;
    }

    //Método para agregar un nodo al final.
    public void add(int valor) {

        //Creación del objeto Nodo
        Node nodo = new Node(valor);

        //Si la cabeza está vacia, entonces el nodo ingresado becomes la cabeza.
        if (this.cabeza == null) {
            this.cabeza = nodo;
        } else {
            //El nodo auxiliar inicialmente queda valiendo la cabeza.
            Node auxiliar = this.cabeza;
            //Mientras que el siguiente no sea vácio.
            while (auxiliar.getSiguiente() != null) {
                //El auxiliar pasa a tener el valor del siguiente.
                auxiliar = auxiliar.getSiguiente();
            }
            //Cuando se acaba el ciclo, el siguiente, es decir el último, queda valiendo lo del nodo.
            auxiliar.setSiguiente(nodo);
        }

    }

    //Método toString
    public String toString() {

        String s = "";
        //s=s+"Lista: ";

        Node p = this.cabeza;
        while (p != null) {
            s = s + "[" + p.toString() + "]";
            p = p.getSiguiente();
        }

        return s;
    }

    public void removerNumero(int b) {
        
        if (this.cabeza.getValor() == b) {
            this.cabeza = cabeza.getSiguiente();
        }

        while (true) {

            int band = 0;
            Node auxiliar = this.cabeza;
            //Mientras que el siguiente no sea vacio y el siguiente no sea el valor a borrar.
            while (auxiliar.getSiguiente() != null && auxiliar.getSiguiente().getValor() != b) {
                auxiliar = auxiliar.getSiguiente();
            }

            if (auxiliar.getSiguiente() != null) {
                //El siguiente, tiene el valor del siguiente, siguiente.
                auxiliar.setSiguiente(auxiliar.getSiguiente().getSiguiente());
                band++;
            }
            
            if(band==0){
                break;
            }

        }
    }

}

/// CLASE Node

package Modelo;

public class Node {
    
    private int valor; 
    private Node siguiente; 

    //Métodos constructores
    public Node (int valor) { 
        this.valor = valor; 
        this.siguiente = null; 
    } 

    public Node (int cargo, Node siguiente) { 
        this.valor = cargo; 
        this.siguiente = siguiente; 
    } 

    //Métodos Set
    public void setValor(int valor) {
        this.valor = valor;
    }

    public void setSiguiente(Node siguiente) {
        this.siguiente = siguiente;
    }
    
   //Métodos get
    public int getValor() {
        return valor;
    }

    public Node getSiguiente() {
        return siguiente;
    }
    
    //Método toString
    public String toString () { 
        return valor + ""; 
    } 
    
}

//// PAQUETE Vista

/// CLASE InOut

package Vista;

import javax.swing.JOptionPane;

public class InOut {

    //Este método se encarga de solicitar string.
    public String solicitarInfo(String mensaje) {
        String s = JOptionPane.showInputDialog(mensaje);
        return s;
    }

    //Este método se encarga de solicitar entero.
    public int solicitarEntero(String mensaje) {
        String s = JOptionPane.showInputDialog(mensaje);

        while (validarStringEntero(s) == false) {
            s = JOptionPane.showInputDialog("DATO NO VÁLIDO\n" + mensaje);
        }

        int n = Integer.parseInt(s);

        return n;
    }

    //Este método se encarga de solicitar boolean.
    public boolean solicitarBoolean(String mensaje) {
        if (JOptionPane.showConfirmDialog(null, mensaje, mensaje,
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {

            return true;
        } else {
            return false;
        }
    }

    //Este método muestra en pantalla el resultado.
    public void mostrarInfo(String mensaje) {
        JOptionPane.showMessageDialog(null, mensaje);
        //Null=Ubicación de Mensaje.
    }

    public boolean validarStringEntero(String n) {
        if ((n).matches("[-]?[0-9]+")) {
            return true;
        } else {
            return false;
        }
    }

}
